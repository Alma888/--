# --


一、socket编程接口   ——内核和用户程序直接进行网络数据交互的接口
        绑定一个五元组
    1、socket常见的API

    2、UDP和TCP用法上的区别？
     （1）UDP是面向报文的
                    发送端发送的是“hello world”
                    接收端接收到的一定是“hello world”
              TCP是面向流的
                   发送端发送的是“hello world”
                   接收端接收到的可能是“h” / “ello” / “wor” /“ld”等都有可能
     （2）TCP是面向连接的
                    connect    连接
              UDP不是面向连接的
                    没有调用过 connect
     （3）UDP是不可靠的——发了对方是否收到，我不知道
              TCP是可靠的——发了对方一定是能收到的
                                           如果收不到，我也知道出问题了
     （4）重点研究的是TCP
                1.通过多线程方式处理 
                2.短连接方式不常用：原因成本太高（频繁的申请释放连接）
     （5）如何写UDP服务器
                第一步：创建一个UDP Socket                
                                   【DatagramSocket udpServerSocket=new DatagramSocket(9898);】
                第二步：循环
                               a、等待对方发送UDP报文过来
                                   【udpServerSocket.receive(receivePacket);】
                               b、回复对方一个UDP报文
                                   【udpServerSocket.send(sendPacket);】
     （6）如何写UDP客户端
                第一步：创建一个UDP Socket
                                   【DatagramSocket udpClientSocket=new DatagramSocket();】
                第二步：循环
                               a、往一个server端口发送UDP报文
                                   【udpClientSocket.send(sendPacket);】
                               b、等待对方的回复
                                   【udpClientSocket.receive(receivePacket);】
     （7）如何写一个TCP服务器
                第一步：创建一个TCP Socket 并进行绑定
                                   【ServerSocket tcpServerSocket=new ServerSocket(8080);】
                第二步：循环
                               a、等待客户端连接上来
                                   【Socket clientSocket=tcpServerSocket.accept();】
                               b、把该客户端的处理工作交给线程池去处理
                                   【pool.execute(new TalkRunnable(clientSocket));】
     （8）线程池处理流程
               a、把输入流和输出流都转成合适的字符流
               b、等待对方的输入，直到一个特殊字符位置(\r\n)
                                   【String line = reader.readLine();】
               c、回复对方消息
                                   【out.println(response);】
                                   【out.flush();】

              PS：
                  正式员工数量                                      有任务过来：
                  临时工+正式数量           1.判断现在公司人数如果 < 正式员工数量
                  空闲时间                                      则请人干活（起线程）
                  队列                               2.如果队列中放的下，先把任务放入队列中
                  失败策略                        3.如果临时工人数还有富裕，请临时工干活
                                                                         4.执行失败策略
